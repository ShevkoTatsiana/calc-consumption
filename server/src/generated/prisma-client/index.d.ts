// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  consumptionItem: (where?: ConsumptionItemWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  material: (where?: MaterialWhereInput) => Promise<boolean>;
  result: (where?: ResultWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  consumptionItem: (
    where: ConsumptionItemWhereUniqueInput
  ) => ConsumptionItemNullablePromise;
  consumptionItems: (args?: {
    where?: ConsumptionItemWhereInput;
    orderBy?: ConsumptionItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ConsumptionItem>;
  consumptionItemsConnection: (args?: {
    where?: ConsumptionItemWhereInput;
    orderBy?: ConsumptionItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConsumptionItemConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  material: (where: MaterialWhereUniqueInput) => MaterialNullablePromise;
  materials: (args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Material>;
  materialsConnection: (args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MaterialConnectionPromise;
  result: (where: ResultWhereUniqueInput) => ResultNullablePromise;
  results: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Result>;
  resultsConnection: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResultConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConsumptionItem: (
    data: ConsumptionItemCreateInput
  ) => ConsumptionItemPromise;
  updateConsumptionItem: (args: {
    data: ConsumptionItemUpdateInput;
    where: ConsumptionItemWhereUniqueInput;
  }) => ConsumptionItemPromise;
  updateManyConsumptionItems: (args: {
    data: ConsumptionItemUpdateManyMutationInput;
    where?: ConsumptionItemWhereInput;
  }) => BatchPayloadPromise;
  upsertConsumptionItem: (args: {
    where: ConsumptionItemWhereUniqueInput;
    create: ConsumptionItemCreateInput;
    update: ConsumptionItemUpdateInput;
  }) => ConsumptionItemPromise;
  deleteConsumptionItem: (
    where: ConsumptionItemWhereUniqueInput
  ) => ConsumptionItemPromise;
  deleteManyConsumptionItems: (
    where?: ConsumptionItemWhereInput
  ) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createMaterial: (data: MaterialCreateInput) => MaterialPromise;
  updateMaterial: (args: {
    data: MaterialUpdateInput;
    where: MaterialWhereUniqueInput;
  }) => MaterialPromise;
  updateManyMaterials: (args: {
    data: MaterialUpdateManyMutationInput;
    where?: MaterialWhereInput;
  }) => BatchPayloadPromise;
  upsertMaterial: (args: {
    where: MaterialWhereUniqueInput;
    create: MaterialCreateInput;
    update: MaterialUpdateInput;
  }) => MaterialPromise;
  deleteMaterial: (where: MaterialWhereUniqueInput) => MaterialPromise;
  deleteManyMaterials: (where?: MaterialWhereInput) => BatchPayloadPromise;
  createResult: (data: ResultCreateInput) => ResultPromise;
  updateResult: (args: {
    data: ResultUpdateInput;
    where: ResultWhereUniqueInput;
  }) => ResultPromise;
  updateManyResults: (args: {
    data: ResultUpdateManyMutationInput;
    where?: ResultWhereInput;
  }) => BatchPayloadPromise;
  upsertResult: (args: {
    where: ResultWhereUniqueInput;
    create: ResultCreateInput;
    update: ResultUpdateInput;
  }) => ResultPromise;
  deleteResult: (where: ResultWhereUniqueInput) => ResultPromise;
  deleteManyResults: (where?: ResultWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  consumptionItem: (
    where?: ConsumptionItemSubscriptionWhereInput
  ) => ConsumptionItemSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  material: (
    where?: MaterialSubscriptionWhereInput
  ) => MaterialSubscriptionPayloadSubscription;
  result: (
    where?: ResultSubscriptionWhereInput
  ) => ResultSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ConsumptionItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "area_ASC"
  | "area_DESC"
  | "height_ASC"
  | "height_DESC"
  | "consumption_ASC"
  | "consumption_DESC"
  | "general_consumption_ASC"
  | "general_consumption_DESC"
  | "coast_ASC"
  | "coast_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type MaterialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "consumption_ASC"
  | "consumption_DESC";

export type ResultOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "grand_total_ASC"
  | "grand_total_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConsumptionItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConsumptionItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  area?: Maybe<Float>;
  area_not?: Maybe<Float>;
  area_in?: Maybe<Float[] | Float>;
  area_not_in?: Maybe<Float[] | Float>;
  area_lt?: Maybe<Float>;
  area_lte?: Maybe<Float>;
  area_gt?: Maybe<Float>;
  area_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  consumption?: Maybe<Float>;
  consumption_not?: Maybe<Float>;
  consumption_in?: Maybe<Float[] | Float>;
  consumption_not_in?: Maybe<Float[] | Float>;
  consumption_lt?: Maybe<Float>;
  consumption_lte?: Maybe<Float>;
  consumption_gt?: Maybe<Float>;
  consumption_gte?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  general_consumption_not?: Maybe<Float>;
  general_consumption_in?: Maybe<Float[] | Float>;
  general_consumption_not_in?: Maybe<Float[] | Float>;
  general_consumption_lt?: Maybe<Float>;
  general_consumption_lte?: Maybe<Float>;
  general_consumption_gt?: Maybe<Float>;
  general_consumption_gte?: Maybe<Float>;
  coast?: Maybe<Float>;
  coast_not?: Maybe<Float>;
  coast_in?: Maybe<Float[] | Float>;
  coast_not_in?: Maybe<Float[] | Float>;
  coast_lt?: Maybe<Float>;
  coast_lte?: Maybe<Float>;
  coast_gt?: Maybe<Float>;
  coast_gte?: Maybe<Float>;
  includeIn?: Maybe<ResultWhereInput>;
  AND?: Maybe<ConsumptionItemWhereInput[] | ConsumptionItemWhereInput>;
  OR?: Maybe<ConsumptionItemWhereInput[] | ConsumptionItemWhereInput>;
  NOT?: Maybe<ConsumptionItemWhereInput[] | ConsumptionItemWhereInput>;
}

export interface ResultWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  consumption_items_every?: Maybe<ConsumptionItemWhereInput>;
  consumption_items_some?: Maybe<ConsumptionItemWhereInput>;
  consumption_items_none?: Maybe<ConsumptionItemWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  grand_total?: Maybe<Float>;
  grand_total_not?: Maybe<Float>;
  grand_total_in?: Maybe<Float[] | Float>;
  grand_total_not_in?: Maybe<Float[] | Float>;
  grand_total_lt?: Maybe<Float>;
  grand_total_lte?: Maybe<Float>;
  grand_total_gt?: Maybe<Float>;
  grand_total_gte?: Maybe<Float>;
  AND?: Maybe<ResultWhereInput[] | ResultWhereInput>;
  OR?: Maybe<ResultWhereInput[] | ResultWhereInput>;
  NOT?: Maybe<ResultWhereInput[] | ResultWhereInput>;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type MaterialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MaterialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  consumption?: Maybe<Float>;
  consumption_not?: Maybe<Float>;
  consumption_in?: Maybe<Float[] | Float>;
  consumption_not_in?: Maybe<Float[] | Float>;
  consumption_lt?: Maybe<Float>;
  consumption_lte?: Maybe<Float>;
  consumption_gt?: Maybe<Float>;
  consumption_gte?: Maybe<Float>;
  AND?: Maybe<MaterialWhereInput[] | MaterialWhereInput>;
  OR?: Maybe<MaterialWhereInput[] | MaterialWhereInput>;
  NOT?: Maybe<MaterialWhereInput[] | MaterialWhereInput>;
}

export type ResultWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ConsumptionItemCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  area?: Maybe<Float>;
  height?: Maybe<Float>;
  consumption?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  coast?: Maybe<Float>;
  includeIn?: Maybe<ResultCreateOneWithoutConsumption_itemsInput>;
}

export interface ResultCreateOneWithoutConsumption_itemsInput {
  create?: Maybe<ResultCreateWithoutConsumption_itemsInput>;
  connect?: Maybe<ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutConsumption_itemsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  grand_total?: Maybe<Float>;
}

export interface ConsumptionItemUpdateInput {
  name?: Maybe<String>;
  area?: Maybe<Float>;
  height?: Maybe<Float>;
  consumption?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  coast?: Maybe<Float>;
  includeIn?: Maybe<ResultUpdateOneWithoutConsumption_itemsInput>;
}

export interface ResultUpdateOneWithoutConsumption_itemsInput {
  create?: Maybe<ResultCreateWithoutConsumption_itemsInput>;
  update?: Maybe<ResultUpdateWithoutConsumption_itemsDataInput>;
  upsert?: Maybe<ResultUpsertWithoutConsumption_itemsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ResultWhereUniqueInput>;
}

export interface ResultUpdateWithoutConsumption_itemsDataInput {
  title?: Maybe<String>;
  grand_total?: Maybe<Float>;
}

export interface ResultUpsertWithoutConsumption_itemsInput {
  update: ResultUpdateWithoutConsumption_itemsDataInput;
  create: ResultCreateWithoutConsumption_itemsInput;
}

export interface ConsumptionItemUpdateManyMutationInput {
  name?: Maybe<String>;
  area?: Maybe<Float>;
  height?: Maybe<Float>;
  consumption?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  coast?: Maybe<Float>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
}

export interface UserCreateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface LinkUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  update?: Maybe<UserUpdateWithoutLinksDataInput>;
  upsert?: Maybe<UserUpsertWithoutLinksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface LinkUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface MaterialCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  consumption?: Maybe<Float>;
}

export interface MaterialUpdateInput {
  name?: Maybe<String>;
  consumption?: Maybe<Float>;
}

export interface MaterialUpdateManyMutationInput {
  name?: Maybe<String>;
  consumption?: Maybe<Float>;
}

export interface ResultCreateInput {
  id?: Maybe<ID_Input>;
  consumption_items?: Maybe<ConsumptionItemCreateManyWithoutIncludeInInput>;
  title?: Maybe<String>;
  grand_total?: Maybe<Float>;
}

export interface ConsumptionItemCreateManyWithoutIncludeInInput {
  create?: Maybe<
    | ConsumptionItemCreateWithoutIncludeInInput[]
    | ConsumptionItemCreateWithoutIncludeInInput
  >;
  connect?: Maybe<
    ConsumptionItemWhereUniqueInput[] | ConsumptionItemWhereUniqueInput
  >;
}

export interface ConsumptionItemCreateWithoutIncludeInInput {
  id?: Maybe<ID_Input>;
  name: String;
  area?: Maybe<Float>;
  height?: Maybe<Float>;
  consumption?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  coast?: Maybe<Float>;
}

export interface ResultUpdateInput {
  consumption_items?: Maybe<ConsumptionItemUpdateManyWithoutIncludeInInput>;
  title?: Maybe<String>;
  grand_total?: Maybe<Float>;
}

export interface ConsumptionItemUpdateManyWithoutIncludeInInput {
  create?: Maybe<
    | ConsumptionItemCreateWithoutIncludeInInput[]
    | ConsumptionItemCreateWithoutIncludeInInput
  >;
  delete?: Maybe<
    ConsumptionItemWhereUniqueInput[] | ConsumptionItemWhereUniqueInput
  >;
  connect?: Maybe<
    ConsumptionItemWhereUniqueInput[] | ConsumptionItemWhereUniqueInput
  >;
  set?: Maybe<
    ConsumptionItemWhereUniqueInput[] | ConsumptionItemWhereUniqueInput
  >;
  disconnect?: Maybe<
    ConsumptionItemWhereUniqueInput[] | ConsumptionItemWhereUniqueInput
  >;
  update?: Maybe<
    | ConsumptionItemUpdateWithWhereUniqueWithoutIncludeInInput[]
    | ConsumptionItemUpdateWithWhereUniqueWithoutIncludeInInput
  >;
  upsert?: Maybe<
    | ConsumptionItemUpsertWithWhereUniqueWithoutIncludeInInput[]
    | ConsumptionItemUpsertWithWhereUniqueWithoutIncludeInInput
  >;
  deleteMany?: Maybe<
    ConsumptionItemScalarWhereInput[] | ConsumptionItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConsumptionItemUpdateManyWithWhereNestedInput[]
    | ConsumptionItemUpdateManyWithWhereNestedInput
  >;
}

export interface ConsumptionItemUpdateWithWhereUniqueWithoutIncludeInInput {
  where: ConsumptionItemWhereUniqueInput;
  data: ConsumptionItemUpdateWithoutIncludeInDataInput;
}

export interface ConsumptionItemUpdateWithoutIncludeInDataInput {
  name?: Maybe<String>;
  area?: Maybe<Float>;
  height?: Maybe<Float>;
  consumption?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  coast?: Maybe<Float>;
}

export interface ConsumptionItemUpsertWithWhereUniqueWithoutIncludeInInput {
  where: ConsumptionItemWhereUniqueInput;
  update: ConsumptionItemUpdateWithoutIncludeInDataInput;
  create: ConsumptionItemCreateWithoutIncludeInInput;
}

export interface ConsumptionItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  area?: Maybe<Float>;
  area_not?: Maybe<Float>;
  area_in?: Maybe<Float[] | Float>;
  area_not_in?: Maybe<Float[] | Float>;
  area_lt?: Maybe<Float>;
  area_lte?: Maybe<Float>;
  area_gt?: Maybe<Float>;
  area_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  consumption?: Maybe<Float>;
  consumption_not?: Maybe<Float>;
  consumption_in?: Maybe<Float[] | Float>;
  consumption_not_in?: Maybe<Float[] | Float>;
  consumption_lt?: Maybe<Float>;
  consumption_lte?: Maybe<Float>;
  consumption_gt?: Maybe<Float>;
  consumption_gte?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  general_consumption_not?: Maybe<Float>;
  general_consumption_in?: Maybe<Float[] | Float>;
  general_consumption_not_in?: Maybe<Float[] | Float>;
  general_consumption_lt?: Maybe<Float>;
  general_consumption_lte?: Maybe<Float>;
  general_consumption_gt?: Maybe<Float>;
  general_consumption_gte?: Maybe<Float>;
  coast?: Maybe<Float>;
  coast_not?: Maybe<Float>;
  coast_in?: Maybe<Float[] | Float>;
  coast_not_in?: Maybe<Float[] | Float>;
  coast_lt?: Maybe<Float>;
  coast_lte?: Maybe<Float>;
  coast_gt?: Maybe<Float>;
  coast_gte?: Maybe<Float>;
  AND?: Maybe<
    ConsumptionItemScalarWhereInput[] | ConsumptionItemScalarWhereInput
  >;
  OR?: Maybe<
    ConsumptionItemScalarWhereInput[] | ConsumptionItemScalarWhereInput
  >;
  NOT?: Maybe<
    ConsumptionItemScalarWhereInput[] | ConsumptionItemScalarWhereInput
  >;
}

export interface ConsumptionItemUpdateManyWithWhereNestedInput {
  where: ConsumptionItemScalarWhereInput;
  data: ConsumptionItemUpdateManyDataInput;
}

export interface ConsumptionItemUpdateManyDataInput {
  name?: Maybe<String>;
  area?: Maybe<Float>;
  height?: Maybe<Float>;
  consumption?: Maybe<Float>;
  general_consumption?: Maybe<Float>;
  coast?: Maybe<Float>;
}

export interface ResultUpdateManyMutationInput {
  title?: Maybe<String>;
  grand_total?: Maybe<Float>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ConsumptionItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConsumptionItemWhereInput>;
  AND?: Maybe<
    | ConsumptionItemSubscriptionWhereInput[]
    | ConsumptionItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ConsumptionItemSubscriptionWhereInput[]
    | ConsumptionItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ConsumptionItemSubscriptionWhereInput[]
    | ConsumptionItemSubscriptionWhereInput
  >;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface MaterialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MaterialWhereInput>;
  AND?: Maybe<
    MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput
  >;
  OR?: Maybe<MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput>;
  NOT?: Maybe<
    MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput
  >;
}

export interface ResultSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResultWhereInput>;
  AND?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
  OR?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
  NOT?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ConsumptionItem {
  id: ID_Output;
  name: String;
  area?: Float;
  height?: Float;
  consumption?: Float;
  general_consumption?: Float;
  coast?: Float;
}

export interface ConsumptionItemPromise
  extends Promise<ConsumptionItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  area: () => Promise<Float>;
  height: () => Promise<Float>;
  consumption: () => Promise<Float>;
  general_consumption: () => Promise<Float>;
  coast: () => Promise<Float>;
  includeIn: <T = ResultPromise>() => T;
}

export interface ConsumptionItemSubscription
  extends Promise<AsyncIterator<ConsumptionItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  area: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  consumption: () => Promise<AsyncIterator<Float>>;
  general_consumption: () => Promise<AsyncIterator<Float>>;
  coast: () => Promise<AsyncIterator<Float>>;
  includeIn: <T = ResultSubscription>() => T;
}

export interface ConsumptionItemNullablePromise
  extends Promise<ConsumptionItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  area: () => Promise<Float>;
  height: () => Promise<Float>;
  consumption: () => Promise<Float>;
  general_consumption: () => Promise<Float>;
  coast: () => Promise<Float>;
  includeIn: <T = ResultPromise>() => T;
}

export interface Result {
  id: ID_Output;
  title?: String;
  grand_total?: Float;
}

export interface ResultPromise extends Promise<Result>, Fragmentable {
  id: () => Promise<ID_Output>;
  consumption_items: <T = FragmentableArray<ConsumptionItem>>(args?: {
    where?: ConsumptionItemWhereInput;
    orderBy?: ConsumptionItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  grand_total: () => Promise<Float>;
}

export interface ResultSubscription
  extends Promise<AsyncIterator<Result>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  consumption_items: <
    T = Promise<AsyncIterator<ConsumptionItemSubscription>>
  >(args?: {
    where?: ConsumptionItemWhereInput;
    orderBy?: ConsumptionItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
  grand_total: () => Promise<AsyncIterator<Float>>;
}

export interface ResultNullablePromise
  extends Promise<Result | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  consumption_items: <T = FragmentableArray<ConsumptionItem>>(args?: {
    where?: ConsumptionItemWhereInput;
    orderBy?: ConsumptionItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  grand_total: () => Promise<Float>;
}

export interface ConsumptionItemConnection {
  pageInfo: PageInfo;
  edges: ConsumptionItemEdge[];
}

export interface ConsumptionItemConnectionPromise
  extends Promise<ConsumptionItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConsumptionItemEdge>>() => T;
  aggregate: <T = AggregateConsumptionItemPromise>() => T;
}

export interface ConsumptionItemConnectionSubscription
  extends Promise<AsyncIterator<ConsumptionItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConsumptionItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConsumptionItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConsumptionItemEdge {
  node: ConsumptionItem;
  cursor: String;
}

export interface ConsumptionItemEdgePromise
  extends Promise<ConsumptionItemEdge>,
    Fragmentable {
  node: <T = ConsumptionItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConsumptionItemEdgeSubscription
  extends Promise<AsyncIterator<ConsumptionItemEdge>>,
    Fragmentable {
  node: <T = ConsumptionItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConsumptionItem {
  count: Int;
}

export interface AggregateConsumptionItemPromise
  extends Promise<AggregateConsumptionItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConsumptionItemSubscription
  extends Promise<AsyncIterator<AggregateConsumptionItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Material {
  id: ID_Output;
  name: String;
  consumption?: Float;
}

export interface MaterialPromise extends Promise<Material>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  consumption: () => Promise<Float>;
}

export interface MaterialSubscription
  extends Promise<AsyncIterator<Material>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  consumption: () => Promise<AsyncIterator<Float>>;
}

export interface MaterialNullablePromise
  extends Promise<Material | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  consumption: () => Promise<Float>;
}

export interface MaterialConnection {
  pageInfo: PageInfo;
  edges: MaterialEdge[];
}

export interface MaterialConnectionPromise
  extends Promise<MaterialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MaterialEdge>>() => T;
  aggregate: <T = AggregateMaterialPromise>() => T;
}

export interface MaterialConnectionSubscription
  extends Promise<AsyncIterator<MaterialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MaterialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMaterialSubscription>() => T;
}

export interface MaterialEdge {
  node: Material;
  cursor: String;
}

export interface MaterialEdgePromise
  extends Promise<MaterialEdge>,
    Fragmentable {
  node: <T = MaterialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MaterialEdgeSubscription
  extends Promise<AsyncIterator<MaterialEdge>>,
    Fragmentable {
  node: <T = MaterialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMaterial {
  count: Int;
}

export interface AggregateMaterialPromise
  extends Promise<AggregateMaterial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMaterialSubscription
  extends Promise<AsyncIterator<AggregateMaterial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResultConnection {
  pageInfo: PageInfo;
  edges: ResultEdge[];
}

export interface ResultConnectionPromise
  extends Promise<ResultConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultEdge>>() => T;
  aggregate: <T = AggregateResultPromise>() => T;
}

export interface ResultConnectionSubscription
  extends Promise<AsyncIterator<ResultConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultSubscription>() => T;
}

export interface ResultEdge {
  node: Result;
  cursor: String;
}

export interface ResultEdgePromise extends Promise<ResultEdge>, Fragmentable {
  node: <T = ResultPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultEdgeSubscription
  extends Promise<AsyncIterator<ResultEdge>>,
    Fragmentable {
  node: <T = ResultSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResult {
  count: Int;
}

export interface AggregateResultPromise
  extends Promise<AggregateResult>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultSubscription
  extends Promise<AsyncIterator<AggregateResult>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConsumptionItemSubscriptionPayload {
  mutation: MutationType;
  node: ConsumptionItem;
  updatedFields: String[];
  previousValues: ConsumptionItemPreviousValues;
}

export interface ConsumptionItemSubscriptionPayloadPromise
  extends Promise<ConsumptionItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConsumptionItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConsumptionItemPreviousValuesPromise>() => T;
}

export interface ConsumptionItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConsumptionItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConsumptionItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConsumptionItemPreviousValuesSubscription>() => T;
}

export interface ConsumptionItemPreviousValues {
  id: ID_Output;
  name: String;
  area?: Float;
  height?: Float;
  consumption?: Float;
  general_consumption?: Float;
  coast?: Float;
}

export interface ConsumptionItemPreviousValuesPromise
  extends Promise<ConsumptionItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  area: () => Promise<Float>;
  height: () => Promise<Float>;
  consumption: () => Promise<Float>;
  general_consumption: () => Promise<Float>;
  coast: () => Promise<Float>;
}

export interface ConsumptionItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ConsumptionItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  area: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  consumption: () => Promise<AsyncIterator<Float>>;
  general_consumption: () => Promise<AsyncIterator<Float>>;
  coast: () => Promise<AsyncIterator<Float>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface MaterialSubscriptionPayload {
  mutation: MutationType;
  node: Material;
  updatedFields: String[];
  previousValues: MaterialPreviousValues;
}

export interface MaterialSubscriptionPayloadPromise
  extends Promise<MaterialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MaterialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MaterialPreviousValuesPromise>() => T;
}

export interface MaterialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MaterialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MaterialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MaterialPreviousValuesSubscription>() => T;
}

export interface MaterialPreviousValues {
  id: ID_Output;
  name: String;
  consumption?: Float;
}

export interface MaterialPreviousValuesPromise
  extends Promise<MaterialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  consumption: () => Promise<Float>;
}

export interface MaterialPreviousValuesSubscription
  extends Promise<AsyncIterator<MaterialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  consumption: () => Promise<AsyncIterator<Float>>;
}

export interface ResultSubscriptionPayload {
  mutation: MutationType;
  node: Result;
  updatedFields: String[];
  previousValues: ResultPreviousValues;
}

export interface ResultSubscriptionPayloadPromise
  extends Promise<ResultSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultPreviousValuesPromise>() => T;
}

export interface ResultSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultPreviousValuesSubscription>() => T;
}

export interface ResultPreviousValues {
  id: ID_Output;
  title?: String;
  grand_total?: Float;
}

export interface ResultPreviousValuesPromise
  extends Promise<ResultPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  grand_total: () => Promise<Float>;
}

export interface ResultPreviousValuesSubscription
  extends Promise<AsyncIterator<ResultPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  grand_total: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "Material",
    embedded: false
  },
  {
    name: "ConsumptionItem",
    embedded: false
  },
  {
    name: "Result",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
