module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConsumptionItem {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateMaterial {
  count: Int!
}

type AggregateResult {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type ConsumptionItem {
  id: ID!
  name: String!
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
  includeIn: Result
}

type ConsumptionItemConnection {
  pageInfo: PageInfo!
  edges: [ConsumptionItemEdge]!
  aggregate: AggregateConsumptionItem!
}

input ConsumptionItemCreateInput {
  id: ID
  name: String!
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
  includeIn: ResultCreateOneWithoutConsumption_itemsInput
}

input ConsumptionItemCreateManyWithoutIncludeInInput {
  create: [ConsumptionItemCreateWithoutIncludeInInput!]
  connect: [ConsumptionItemWhereUniqueInput!]
}

input ConsumptionItemCreateWithoutIncludeInInput {
  id: ID
  name: String!
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
}

type ConsumptionItemEdge {
  node: ConsumptionItem!
  cursor: String!
}

enum ConsumptionItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  area_ASC
  area_DESC
  height_ASC
  height_DESC
  consumption_ASC
  consumption_DESC
  general_consumption_ASC
  general_consumption_DESC
  coast_ASC
  coast_DESC
}

type ConsumptionItemPreviousValues {
  id: ID!
  name: String!
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
}

input ConsumptionItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: Float
  area_not: Float
  area_in: [Float!]
  area_not_in: [Float!]
  area_lt: Float
  area_lte: Float
  area_gt: Float
  area_gte: Float
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  consumption: Float
  consumption_not: Float
  consumption_in: [Float!]
  consumption_not_in: [Float!]
  consumption_lt: Float
  consumption_lte: Float
  consumption_gt: Float
  consumption_gte: Float
  general_consumption: Float
  general_consumption_not: Float
  general_consumption_in: [Float!]
  general_consumption_not_in: [Float!]
  general_consumption_lt: Float
  general_consumption_lte: Float
  general_consumption_gt: Float
  general_consumption_gte: Float
  coast: Float
  coast_not: Float
  coast_in: [Float!]
  coast_not_in: [Float!]
  coast_lt: Float
  coast_lte: Float
  coast_gt: Float
  coast_gte: Float
  AND: [ConsumptionItemScalarWhereInput!]
  OR: [ConsumptionItemScalarWhereInput!]
  NOT: [ConsumptionItemScalarWhereInput!]
}

type ConsumptionItemSubscriptionPayload {
  mutation: MutationType!
  node: ConsumptionItem
  updatedFields: [String!]
  previousValues: ConsumptionItemPreviousValues
}

input ConsumptionItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConsumptionItemWhereInput
  AND: [ConsumptionItemSubscriptionWhereInput!]
  OR: [ConsumptionItemSubscriptionWhereInput!]
  NOT: [ConsumptionItemSubscriptionWhereInput!]
}

input ConsumptionItemUpdateInput {
  name: String
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
  includeIn: ResultUpdateOneWithoutConsumption_itemsInput
}

input ConsumptionItemUpdateManyDataInput {
  name: String
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
}

input ConsumptionItemUpdateManyMutationInput {
  name: String
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
}

input ConsumptionItemUpdateManyWithoutIncludeInInput {
  create: [ConsumptionItemCreateWithoutIncludeInInput!]
  delete: [ConsumptionItemWhereUniqueInput!]
  connect: [ConsumptionItemWhereUniqueInput!]
  set: [ConsumptionItemWhereUniqueInput!]
  disconnect: [ConsumptionItemWhereUniqueInput!]
  update: [ConsumptionItemUpdateWithWhereUniqueWithoutIncludeInInput!]
  upsert: [ConsumptionItemUpsertWithWhereUniqueWithoutIncludeInInput!]
  deleteMany: [ConsumptionItemScalarWhereInput!]
  updateMany: [ConsumptionItemUpdateManyWithWhereNestedInput!]
}

input ConsumptionItemUpdateManyWithWhereNestedInput {
  where: ConsumptionItemScalarWhereInput!
  data: ConsumptionItemUpdateManyDataInput!
}

input ConsumptionItemUpdateWithoutIncludeInDataInput {
  name: String
  area: Float
  height: Float
  consumption: Float
  general_consumption: Float
  coast: Float
}

input ConsumptionItemUpdateWithWhereUniqueWithoutIncludeInInput {
  where: ConsumptionItemWhereUniqueInput!
  data: ConsumptionItemUpdateWithoutIncludeInDataInput!
}

input ConsumptionItemUpsertWithWhereUniqueWithoutIncludeInInput {
  where: ConsumptionItemWhereUniqueInput!
  update: ConsumptionItemUpdateWithoutIncludeInDataInput!
  create: ConsumptionItemCreateWithoutIncludeInInput!
}

input ConsumptionItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: Float
  area_not: Float
  area_in: [Float!]
  area_not_in: [Float!]
  area_lt: Float
  area_lte: Float
  area_gt: Float
  area_gte: Float
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  consumption: Float
  consumption_not: Float
  consumption_in: [Float!]
  consumption_not_in: [Float!]
  consumption_lt: Float
  consumption_lte: Float
  consumption_gt: Float
  consumption_gte: Float
  general_consumption: Float
  general_consumption_not: Float
  general_consumption_in: [Float!]
  general_consumption_not_in: [Float!]
  general_consumption_lt: Float
  general_consumption_lte: Float
  general_consumption_gt: Float
  general_consumption_gte: Float
  coast: Float
  coast_not: Float
  coast_in: [Float!]
  coast_not_in: [Float!]
  coast_lt: Float
  coast_lte: Float
  coast_gt: Float
  coast_gte: Float
  includeIn: ResultWhereInput
  AND: [ConsumptionItemWhereInput!]
  OR: [ConsumptionItemWhereInput!]
  NOT: [ConsumptionItemWhereInput!]
}

input ConsumptionItemWhereUniqueInput {
  id: ID
}

scalar DateTime

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
}

input LinkCreateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateWithoutPostedByInput {
  id: ID
  description: String!
  url: String!
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
}

input LinkUpdateManyDataInput {
  description: String
  url: String
}

input LinkUpdateManyMutationInput {
  description: String
  url: String
}

input LinkUpdateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutPostedByDataInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutPostedByDataInput!
  create: LinkCreateWithoutPostedByInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postedBy: UserWhereInput
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Material {
  id: ID!
  name: String!
  consumption: Float
}

type MaterialConnection {
  pageInfo: PageInfo!
  edges: [MaterialEdge]!
  aggregate: AggregateMaterial!
}

input MaterialCreateInput {
  id: ID
  name: String!
  consumption: Float
}

type MaterialEdge {
  node: Material!
  cursor: String!
}

enum MaterialOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  consumption_ASC
  consumption_DESC
}

type MaterialPreviousValues {
  id: ID!
  name: String!
  consumption: Float
}

type MaterialSubscriptionPayload {
  mutation: MutationType!
  node: Material
  updatedFields: [String!]
  previousValues: MaterialPreviousValues
}

input MaterialSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MaterialWhereInput
  AND: [MaterialSubscriptionWhereInput!]
  OR: [MaterialSubscriptionWhereInput!]
  NOT: [MaterialSubscriptionWhereInput!]
}

input MaterialUpdateInput {
  name: String
  consumption: Float
}

input MaterialUpdateManyMutationInput {
  name: String
  consumption: Float
}

input MaterialWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  consumption: Float
  consumption_not: Float
  consumption_in: [Float!]
  consumption_not_in: [Float!]
  consumption_lt: Float
  consumption_lte: Float
  consumption_gt: Float
  consumption_gte: Float
  AND: [MaterialWhereInput!]
  OR: [MaterialWhereInput!]
  NOT: [MaterialWhereInput!]
}

input MaterialWhereUniqueInput {
  id: ID
}

type Mutation {
  createConsumptionItem(data: ConsumptionItemCreateInput!): ConsumptionItem!
  updateConsumptionItem(data: ConsumptionItemUpdateInput!, where: ConsumptionItemWhereUniqueInput!): ConsumptionItem
  updateManyConsumptionItems(data: ConsumptionItemUpdateManyMutationInput!, where: ConsumptionItemWhereInput): BatchPayload!
  upsertConsumptionItem(where: ConsumptionItemWhereUniqueInput!, create: ConsumptionItemCreateInput!, update: ConsumptionItemUpdateInput!): ConsumptionItem!
  deleteConsumptionItem(where: ConsumptionItemWhereUniqueInput!): ConsumptionItem
  deleteManyConsumptionItems(where: ConsumptionItemWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createMaterial(data: MaterialCreateInput!): Material!
  updateMaterial(data: MaterialUpdateInput!, where: MaterialWhereUniqueInput!): Material
  updateManyMaterials(data: MaterialUpdateManyMutationInput!, where: MaterialWhereInput): BatchPayload!
  upsertMaterial(where: MaterialWhereUniqueInput!, create: MaterialCreateInput!, update: MaterialUpdateInput!): Material!
  deleteMaterial(where: MaterialWhereUniqueInput!): Material
  deleteManyMaterials(where: MaterialWhereInput): BatchPayload!
  createResult(data: ResultCreateInput!): Result!
  updateResult(data: ResultUpdateInput!, where: ResultWhereUniqueInput!): Result
  updateManyResults(data: ResultUpdateManyMutationInput!, where: ResultWhereInput): BatchPayload!
  upsertResult(where: ResultWhereUniqueInput!, create: ResultCreateInput!, update: ResultUpdateInput!): Result!
  deleteResult(where: ResultWhereUniqueInput!): Result
  deleteManyResults(where: ResultWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  consumptionItem(where: ConsumptionItemWhereUniqueInput!): ConsumptionItem
  consumptionItems(where: ConsumptionItemWhereInput, orderBy: ConsumptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConsumptionItem]!
  consumptionItemsConnection(where: ConsumptionItemWhereInput, orderBy: ConsumptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConsumptionItemConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  material(where: MaterialWhereUniqueInput!): Material
  materials(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Material]!
  materialsConnection(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MaterialConnection!
  result(where: ResultWhereUniqueInput!): Result
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result]!
  resultsConnection(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResultConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Result {
  id: ID!
  consumption_items(where: ConsumptionItemWhereInput, orderBy: ConsumptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConsumptionItem!]
  title: String
  grand_total: Float
}

type ResultConnection {
  pageInfo: PageInfo!
  edges: [ResultEdge]!
  aggregate: AggregateResult!
}

input ResultCreateInput {
  id: ID
  consumption_items: ConsumptionItemCreateManyWithoutIncludeInInput
  title: String
  grand_total: Float
}

input ResultCreateOneWithoutConsumption_itemsInput {
  create: ResultCreateWithoutConsumption_itemsInput
  connect: ResultWhereUniqueInput
}

input ResultCreateWithoutConsumption_itemsInput {
  id: ID
  title: String
  grand_total: Float
}

type ResultEdge {
  node: Result!
  cursor: String!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  grand_total_ASC
  grand_total_DESC
}

type ResultPreviousValues {
  id: ID!
  title: String
  grand_total: Float
}

type ResultSubscriptionPayload {
  mutation: MutationType!
  node: Result
  updatedFields: [String!]
  previousValues: ResultPreviousValues
}

input ResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResultWhereInput
  AND: [ResultSubscriptionWhereInput!]
  OR: [ResultSubscriptionWhereInput!]
  NOT: [ResultSubscriptionWhereInput!]
}

input ResultUpdateInput {
  consumption_items: ConsumptionItemUpdateManyWithoutIncludeInInput
  title: String
  grand_total: Float
}

input ResultUpdateManyMutationInput {
  title: String
  grand_total: Float
}

input ResultUpdateOneWithoutConsumption_itemsInput {
  create: ResultCreateWithoutConsumption_itemsInput
  update: ResultUpdateWithoutConsumption_itemsDataInput
  upsert: ResultUpsertWithoutConsumption_itemsInput
  delete: Boolean
  disconnect: Boolean
  connect: ResultWhereUniqueInput
}

input ResultUpdateWithoutConsumption_itemsDataInput {
  title: String
  grand_total: Float
}

input ResultUpsertWithoutConsumption_itemsInput {
  update: ResultUpdateWithoutConsumption_itemsDataInput!
  create: ResultCreateWithoutConsumption_itemsInput!
}

input ResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  consumption_items_every: ConsumptionItemWhereInput
  consumption_items_some: ConsumptionItemWhereInput
  consumption_items_none: ConsumptionItemWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  grand_total: Float
  grand_total_not: Float
  grand_total_in: [Float!]
  grand_total_not_in: [Float!]
  grand_total_lt: Float
  grand_total_lte: Float
  grand_total_gt: Float
  grand_total_gte: Float
  AND: [ResultWhereInput!]
  OR: [ResultWhereInput!]
  NOT: [ResultWhereInput!]
}

input ResultWhereUniqueInput {
  id: ID
}

type Subscription {
  consumptionItem(where: ConsumptionItemSubscriptionWhereInput): ConsumptionItemSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  material(where: MaterialSubscriptionWhereInput): MaterialSubscriptionPayload
  result(where: ResultSubscriptionWhereInput): ResultSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLinksInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLinksDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput!
  create: UserCreateWithoutLinksInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    